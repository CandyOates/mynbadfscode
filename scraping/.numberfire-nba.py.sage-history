"import re\nimport json\nimport requests\nfrom bs4 import BeautifulSoup\nfrom docopt import docopt\nimport pandas as pd\n\n\nURL = 'http://www.numberfire.com/nba/fantasy/full-fantasy-basketball-projections'\n\n\ndef get_data():\n    r = requests.get(URL)\n    r.raise_for_status()\n\n    script = BeautifulSoup(r.text, 'lxml').find_all('script')[3]\n    return json.loads(re.search(r'\\tvar NF_DATA = ([^;]*);', script.text).groups(1)[0])\n\n\ndef get_team_analytics(raw_data):\n    team_analytics = pd.DataFrame(raw_data['team_analytics']).transpose()\n    team_analytics.index = team_analytics.index.astype(int)\n    team_analytics = team_analytics.sort_index()\n\n    float_cols = [\n        'champs',\n        'drtg',\n        'drtg_cdf',\n        'nerd',\n        'nerd_cdf',\n        'ortg',\n        'ortg_cdf',\n        'pace',\n        'pace_cdf',\n        'playoffs',\n        'proj_l',\n        'proj_w',\n        'ptdiff',\n        'sd_differential',\n    ]\n    int_cols = [\n        'losses',\n        'nba_team_id',\n        'ovr_rank',\n        'season',\n        'wins',\n    ]\n\n    team_analytics[float_cols] = team_analytics[float_cols].astype(float)\n    team_analytics[int_cols] = team_analytics[int_cols].astype(int)\n    team_analytics['date'] = pd.to_datetime(team_analytics['date'])\n\n    teams = pd.DataFrame(raw_data['teams']).transpose()\n    teams.index = teams.index.astype(int)\n    teams = teams.sort_index()\n\n    int_cols = [\n        'espn_id',\n        'id',\n        'is_active',\n        'league_id',\n    ]\n    teams[int_cols] = teams[int_cols].astype(int)\n\n    return pd.concat([team_analytics, teams], axis='columns')\n\n\ndef get_player_projections(raw_data):\n    players = pd.DataFrame(raw_data['players']).transpose()\n\n    int_cols = [\n        'age',\n        'category_id',\n        'depth_rank',\n        'espn_id',\n        'experience',\n        'height',\n        'id',\n        'league_id',\n        'number',\n        'position_group',\n        'race',\n        'role_id',\n        'team_id',\n        'weight',\n        'yahoo_id',\n    ]\n    players.loc[players['height'] == '', 'height'] = '0'\n    compound_height_ixs = pd.Series(['-' in height for height in players['height']], index=players.index)\n    compound_heights = players.loc[compound_height_ixs, 'height']\n    players.loc[compound_height_ixs, 'height'] = (\n        compound_heights.str.split('-', expand=True).astype(int) * [12, 1]\n    ).sum(axis=1).astype(str)\n    players.loc[players['league_id'] == '', 'league_id'] = '0'\n    players[int_cols] = players[int_cols].astype(int)\n\n    players.loc[players['dob'] == '0000-00-00', 'dob'] = '1900-01-01'\n    players['dob'] = pd.to_datetime(players['dob'])\n\n    bool_cols = [\n        'is_active',\n        'is_rookie',\n    ]\n    players[bool_cols] = players[bool_cols].astype(int).astype(bool)\n\n    players = players.set_index('id').sort_index()\n\n    analytics = pd.DataFrame(raw_data['daily_projections'])\n\n    float_cols = [\n        'ast',\n        'blk',\n        'draft_kings_fp',\n        'draft_kings_ratio',\n        'draft_street_daily_fp',\n        'draft_street_daily_ratio',\n        'draftday_fp',\n        'draftday_ratio',\n        'draftster_fp',\n        'draftster_ratio',\n        'dreb',\n        'drtg',\n        'efg',\n        'fanduel_fp',\n        'fanduel_ratio',\n        'fantasy_aces_fp',\n        'fantasy_aces_ratio',\n        'fantasy_feud_fp',\n        'fantasy_feud_ratio',\n        'fantasy_score_fp',\n        'fantasy_score_ratio',\n        'fanthrowdown_fp',\n        'fanthrowdown_ratio',\n        'fga',\n        'fgm',\n        'fta',\n        'ftm',\n        'game_play_probability',\n        'game_start',\n        'minutes',\n        'nerd',\n        'oreb',\n        'ortg',\n        'p3a',\n        'p3m',\n        'pf',\n        'pts',\n        'star_street_fp',\n        'star_street_ratio',\n        'stl',\n        'tov',\n        'treb',\n        'ts',\n        'usg',\n    ]\n    analytics[float_cols] = analytics[float_cols].astype(float)\n\n    pct_cols = [col for col in analytics.columns if col.endswith('_pct')]\n    analytics[pct_cols] = analytics[pct_cols].astype(float) / 100\n\n    int_cols = [\n        'draft_kings_salary',\n        'draft_street_daily_salary',\n        'draftday_salary',\n        'draftster_salary',\n        'fanduel_salary',\n        'fantasy_aces_salary',\n        'fantasy_feud_salary',\n        'fantasy_score_salary',\n        'fanthrowdown_salary',\n        'nba_game_id',\n        'nba_player_id',\n        'nba_team_id',\n        'season',\n        'star_street_salary',\n    ]\n    analytics[int_cols] = analytics[int_cols].astype(int)\n\n    analytics['date'] = pd.to_datetime(analytics['date'])\n\n    analytics = analytics.set_index('nba_player_id').sort_index()\n    analytics.index.name = 'id'\n\n    return pd.concat([players, analytics], axis='columns')\n\n\ndef main():\n    raw_data = get_data()\n    get_team_analytics(raw_data).to_csv('team_analytics.csv')\n    get_player_projections(raw_data).to_csv('daily_projections.csv')\n\n\nif __name__ == '__main__':\n    main()\n"